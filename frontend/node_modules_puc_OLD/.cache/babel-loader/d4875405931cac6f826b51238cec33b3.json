{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\ws-sts\\\\ulasoftware-metas\\\\frontend\\\\src\\\\components\\\\DonutChart2\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport Chart from 'react-apexcharts';\nimport { getTokenData } from 'utils/auth';\nimport { getAuthData } from 'utils/storage';\nimport { BASE_URL } from '../../utils/request';\nimport * as ReactBootStrap from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DonutChart2 = () => {\n  _s();\n\n  //DADOS DINAMICOS\n  const [loading, setLoading] = useState(false);\n  const [chartData, setChartData] = useState({\n    labels: [],\n    series: []\n  });\n  useEffect(() => {\n    var _getTokenData;\n\n    axios.get(`${BASE_URL}/vendas/venda-embalagem?rota=${(_getTokenData = getTokenData()) === null || _getTokenData === void 0 ? void 0 : _getTokenData.user_name}`, {\n      headers: {\n        Authorization: \"Bearer \" + getAuthData().access_token\n      }\n    }).then(response => {\n      const data = response.data;\n      const myLabels = data.map(x => x.embalagem);\n      const mySeries = data.map(x => x.volume);\n      setChartData({\n        labels: myLabels,\n        series: mySeries\n      });\n      setLoading(true);\n    });\n  }, []);\n  const options = {\n    legend: {\n      show: true\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? chartData.labels.length && chartData.series &&\n    /*#__PURE__*/\n    // @ts-ignore\n    _jsxDEV(Chart, {\n      options: { ...options,\n        labels: chartData.labels\n      },\n      series: chartData.series,\n      type: \"donut\",\n      height: \"240\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"display-flex \",\n      children: /*#__PURE__*/_jsxDEV(ReactBootStrap.Spinner, {\n        className: \"spinner\",\n        animation: \"border\",\n        variant: \"warning\",\n        role: \"status ml\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(DonutChart2, \"H3cz7V5J/mfEXWJtnvlwX/IdDss=\");\n\n_c = DonutChart2;\nexport default DonutChart2;\n\nvar _c;\n\n$RefreshReg$(_c, \"DonutChart2\");","map":{"version":3,"sources":["C:/workspace/ws-sts/ulasoftware-metas/frontend/src/components/DonutChart2/index.tsx"],"names":["axios","useState","useEffect","Chart","getTokenData","getAuthData","BASE_URL","ReactBootStrap","DonutChart2","loading","setLoading","chartData","setChartData","labels","series","get","user_name","headers","Authorization","access_token","then","response","data","myLabels","map","x","embalagem","mySeries","volume","options","legend","show","length"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAO,KAAKC,cAAZ,MAAgC,iBAAhC;;;;AAQA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAY;AAAEY,IAAAA,MAAM,EAAE,EAAV;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAAZ,CAA1C;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACZF,IAAAA,KAAK,CAACe,GAAN,CAAW,GAAET,QAAS,gCAAZ,iBAA2CF,YAAY,EAAvD,kDAA2C,cAAgBY,SAAU,EAA/E,EAAkF;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,YAAYb,WAAW,GAAGc;AAA3C;AAAX,KAAlF,EACKC,IADL,CACWC,QAAD,IAAc;AAChB,YAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAtB;AACA,YAAMC,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,SAAhB,CAAjB;AACA,YAAMC,QAAQ,GAAGL,IAAI,CAACE,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACG,MAAhB,CAAjB;AAEAhB,MAAAA,YAAY,CAAC;AAAEC,QAAAA,MAAM,EAAEU,QAAV;AAAoBT,QAAAA,MAAM,EAAEa;AAA5B,OAAD,CAAZ;AACAjB,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH,KARL;AASH,GAVQ,EAUN,EAVM,CAAT;AAYA,QAAMmB,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAE;AACJC,MAAAA,IAAI,EAAE;AADF;AADI,GAAhB;AAMA,sBACI;AAAA,cACKtB,OAAO,GAEAE,SAAS,CAACE,MAAV,CAAiBmB,MAAjB,IAA2BrB,SAAS,CAACG,MAArC;AAAA;AACI;AACA,YAAC,KAAD;AACI,MAAA,OAAO,EAAE,EAAE,GAAGe,OAAL;AAAchB,QAAAA,MAAM,EAAEF,SAAS,CAACE;AAAhC,OADb;AAEI,MAAA,MAAM,EAAEF,SAAS,CAACG,MAFtB;AAGI,MAAA,IAAI,EAAC,OAHT;AAII,MAAA,MAAM,EAAC;AAJX;AAAA;AAAA;AAAA;AAAA,YAJJ,gBAWJ;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,6BACI,QAAC,cAAD,CAAgB,OAAhB;AAAwB,QAAA,SAAS,EAAC,SAAlC;AAA4C,QAAA,SAAS,EAAC,QAAtD;AAA+D,QAAA,OAAO,EAAC,SAAvE;AAAiF,QAAA,IAAI,EAAC,WAAtF;AAAA,+BACI;AAAM,UAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAZR,mBADJ;AAqBH,CA5CD;;GAAMN,W;;KAAAA,W;AA8CN,eAAeA,WAAf","sourcesContent":["import axios from 'axios';\r\nimport { useState, useEffect } from 'react';\r\nimport Chart from 'react-apexcharts';\r\nimport { getTokenData } from 'utils/auth';\r\nimport { getAuthData } from 'utils/storage';\r\nimport { vendasPorEmbalagem } from '../../types/sales';\r\nimport { BASE_URL } from '../../utils/request';\r\nimport * as ReactBootStrap from 'react-bootstrap';\r\n\r\n\r\ntype ChartData = {\r\n    labels: string[];\r\n    series: number[];\r\n}\r\n\r\nconst DonutChart2 = () => {\r\n    //DADOS DINAMICOS\r\n    const [loading, setLoading] = useState(false);\r\n    const [chartData, setChartData] = useState<ChartData>({ labels: [], series: [] });\r\n\r\n    useEffect(() => {\r\n        axios.get(`${BASE_URL}/vendas/venda-embalagem?rota=${getTokenData()?.user_name}`, { headers: { Authorization: \"Bearer \" + getAuthData().access_token } })\r\n            .then((response) => {\r\n                const data = response.data as vendasPorEmbalagem[];\r\n                const myLabels = data.map(x => x.embalagem)\r\n                const mySeries = data.map(x => x.volume);\r\n\r\n                setChartData({ labels: myLabels, series: mySeries });\r\n                setLoading(true);\r\n            })\r\n    }, []);\r\n\r\n    const options = {\r\n        legend: {\r\n            show: true\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {loading ? (\r\n                \r\n                    chartData.labels.length && chartData.series &&\r\n                        // @ts-ignore\r\n                        <Chart\r\n                            options={{ ...options, labels: chartData.labels }}\r\n                            series={chartData.series}\r\n                            type='donut'\r\n                            height='240'\r\n                        />\r\n        ) : (\r\n                <div className='display-flex '>\r\n                    <ReactBootStrap.Spinner className='spinner' animation='border' variant='warning' role='status ml'>\r\n                        <span className='visually-hidden'>Loading...</span>\r\n                    </ReactBootStrap.Spinner>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DonutChart2;"]},"metadata":{},"sourceType":"module"}