{"ast":null,"code":"import{getAuthData}from'./storage';import jwtDecode from'jwt-decode';//DECODIFICA O TOKEN DE ACESSO PARA VERIFICAÇÃO DE VALIDADE\nexport var getTokenData=function getTokenData(){try{return jwtDecode(getAuthData().access_token);}catch(error){return undefined;}};export var isAuthenticated=function isAuthenticated(){var tokendata=getTokenData();return tokendata&&tokendata.exp*1000>Date.now()?true:false;};//VERIFICA SE USUÁRIO TEM PERMISSÃO DE ACESSO À ROTA\nexport var isAllowedByRole=function isAllowedByRole(){var routeRoles=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];if(routeRoles.length===0){return true;}//VERIFICA SE EXISTE PELO MEMOS UMA PERMISSÃO DE ACESSO À ROTA ATUAL\nvar tokenData=getTokenData();return routeRoles.some(function(role){return tokenData===null||tokenData===void 0?void 0:tokenData.authorities.includes(role);});};","map":{"version":3,"sources":["C:/workspace/ws-sts/ulasoftware-metas/frontend/src/utils/auth.ts"],"names":["getAuthData","jwtDecode","getTokenData","access_token","error","undefined","isAuthenticated","tokendata","exp","Date","now","isAllowedByRole","routeRoles","length","tokenData","some","role","authorities","includes"],"mappings":"AAAA,OAASA,WAAT,KAA4B,WAA5B,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,CAeA;AACA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAA6B,CACrD,GAAI,CACA,MAAOD,CAAAA,SAAS,CAACD,WAAW,GAAGG,YAAf,CAAhB,CACH,CAAC,MAAOC,KAAP,CAAc,CACZ,MAAOC,CAAAA,SAAP,CACH,CACJ,CANM,CASP,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAe,CAC1C,GAAMC,CAAAA,SAAS,CAAGL,YAAY,EAA9B,CAEA,MAAQK,CAAAA,SAAS,EAAIA,SAAS,CAACC,GAAV,CAAgB,IAAhB,CAAuBC,IAAI,CAACC,GAAL,EAArC,CAAmD,IAAnD,CAA0D,KAAjE,CACH,CAJM,CAMP;AACA,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAA6B,IAA5BC,CAAAA,UAA4B,2DAAP,EAAO,CACxD,GAAIA,UAAU,CAACC,MAAX,GAAsB,CAA1B,CAA6B,CACzB,MAAO,KAAP,CACH,CACD;AACA,GAAMC,CAAAA,SAAS,CAAGZ,YAAY,EAA9B,CACA,MAAOU,CAAAA,UAAU,CAACG,IAAX,CAAgB,SAAAC,IAAI,QAAIF,CAAAA,SAAJ,SAAIA,SAAJ,iBAAIA,SAAS,CAAEG,WAAX,CAAuBC,QAAvB,CAAgCF,IAAhC,CAAJ,EAApB,CAAP,CACH,CAPM","sourcesContent":["import { getAuthData } from './storage';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport type Role = 'ROLE_OPERATOR' | 'ROLE_ADMIN';\r\n\r\nexport type AuthData = {\r\n    authenticated: boolean,\r\n    tokenData?: Tokendata;\r\n  }\r\n\r\nexport type Tokendata = {\r\n    exp: number,\r\n    user_name: string,\r\n    authorities: Role[]\r\n}\r\n\r\n//DECODIFICA O TOKEN DE ACESSO PARA VERIFICAÇÃO DE VALIDADE\r\nexport const getTokenData = (): Tokendata | undefined => {\r\n    try {\r\n        return jwtDecode(getAuthData().access_token) as Tokendata;\r\n    } catch (error) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\n\r\nexport const isAuthenticated = (): boolean => {\r\n    const tokendata = getTokenData();\r\n\r\n    return (tokendata && tokendata.exp * 1000 > Date.now()) ? true : false;\r\n}\r\n\r\n//VERIFICA SE USUÁRIO TEM PERMISSÃO DE ACESSO À ROTA\r\nexport const isAllowedByRole = (routeRoles: Role[] = []) => {\r\n    if (routeRoles.length === 0) {\r\n        return true;\r\n    }\r\n    //VERIFICA SE EXISTE PELO MEMOS UMA PERMISSÃO DE ACESSO À ROTA ATUAL\r\n    const tokenData = getTokenData();\r\n    return routeRoles.some(role => tokenData?.authorities.includes(role));\r\n}"]},"metadata":{},"sourceType":"module"}