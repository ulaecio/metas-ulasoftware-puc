{"ast":null,"code":"import { getAuthData } from './storage';\nimport jwtDecode from 'jwt-decode';\n//DECODIFICA O TOKEN DE ACESSO PARA VERIFICAÇÃO DE VALIDADE\nexport const getTokenData = () => {\n  try {\n    return jwtDecode(getAuthData().access_token);\n  } catch (error) {\n    return undefined;\n  }\n};\nexport const isAuthenticated = () => {\n  const tokendata = getTokenData();\n  return tokendata && tokendata.exp * 1000 > Date.now() ? true : false;\n}; //VERIFICA SE USUÁRIO TEM PERMISSÃO DE ACESSO À ROTA\n\nexport const isAllowedByRole = (routeRoles = []) => {\n  if (routeRoles.length === 0) {\n    return true;\n  } //VERIFICA SE EXISTE PELO MEMOS UMA PERMISSÃO DE ACESSO À ROTA ATUAL\n\n\n  const tokenData = getTokenData();\n  return routeRoles.some(role => tokenData === null || tokenData === void 0 ? void 0 : tokenData.authorities.includes(role));\n};","map":{"version":3,"sources":["C:/workspace/ws-sts/ulasoftware-metas/frontend/src/utils/auth.ts"],"names":["getAuthData","jwtDecode","getTokenData","access_token","error","undefined","isAuthenticated","tokendata","exp","Date","now","isAllowedByRole","routeRoles","length","tokenData","some","role","authorities","includes"],"mappings":"AAAA,SAASA,WAAT,QAA4B,WAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAeA;AACA,OAAO,MAAMC,YAAY,GAAG,MAA6B;AACrD,MAAI;AACA,WAAOD,SAAS,CAACD,WAAW,GAAGG,YAAf,CAAhB;AACH,GAFD,CAEE,OAAOC,KAAP,EAAc;AACZ,WAAOC,SAAP;AACH;AACJ,CANM;AASP,OAAO,MAAMC,eAAe,GAAG,MAAe;AAC1C,QAAMC,SAAS,GAAGL,YAAY,EAA9B;AAEA,SAAQK,SAAS,IAAIA,SAAS,CAACC,GAAV,GAAgB,IAAhB,GAAuBC,IAAI,CAACC,GAAL,EAArC,GAAmD,IAAnD,GAA0D,KAAjE;AACH,CAJM,C,CAMP;;AACA,OAAO,MAAMC,eAAe,GAAG,CAACC,UAAkB,GAAG,EAAtB,KAA6B;AACxD,MAAIA,UAAU,CAACC,MAAX,KAAsB,CAA1B,EAA6B;AACzB,WAAO,IAAP;AACH,GAHuD,CAIxD;;;AACA,QAAMC,SAAS,GAAGZ,YAAY,EAA9B;AACA,SAAOU,UAAU,CAACG,IAAX,CAAgBC,IAAI,IAAIF,SAAJ,aAAIA,SAAJ,uBAAIA,SAAS,CAAEG,WAAX,CAAuBC,QAAvB,CAAgCF,IAAhC,CAAxB,CAAP;AACH,CAPM","sourcesContent":["import { getAuthData } from './storage';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nexport type Role = 'ROLE_OPERATOR' | 'ROLE_ADMIN';\r\n\r\nexport type AuthData = {\r\n    authenticated: boolean,\r\n    tokenData?: Tokendata;\r\n  }\r\n\r\nexport type Tokendata = {\r\n    exp: number,\r\n    user_name: string,\r\n    authorities: Role[]\r\n}\r\n\r\n//DECODIFICA O TOKEN DE ACESSO PARA VERIFICAÇÃO DE VALIDADE\r\nexport const getTokenData = (): Tokendata | undefined => {\r\n    try {\r\n        return jwtDecode(getAuthData().access_token) as Tokendata;\r\n    } catch (error) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\n\r\nexport const isAuthenticated = (): boolean => {\r\n    const tokendata = getTokenData();\r\n\r\n    return (tokendata && tokendata.exp * 1000 > Date.now()) ? true : false;\r\n}\r\n\r\n//VERIFICA SE USUÁRIO TEM PERMISSÃO DE ACESSO À ROTA\r\nexport const isAllowedByRole = (routeRoles: Role[] = []) => {\r\n    if (routeRoles.length === 0) {\r\n        return true;\r\n    }\r\n    //VERIFICA SE EXISTE PELO MEMOS UMA PERMISSÃO DE ACESSO À ROTA ATUAL\r\n    const tokenData = getTokenData();\r\n    return routeRoles.some(role => tokenData?.authorities.includes(role));\r\n}"]},"metadata":{},"sourceType":"module"}