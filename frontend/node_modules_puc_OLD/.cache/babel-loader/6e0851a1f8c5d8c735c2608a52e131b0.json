{"ast":null,"code":"import { format } from 'date-fns';\nexport const round = (value, precision) => {\n  var multiplier = Math.pow(100, precision || 0);\n  return Math.round(value * multiplier);\n};\nexport const formatLocalDate = (date, pattern) => {\n  const dt = new Date(date);\n  const dtDateOnly = new Date(dt.valueOf() + dt.getTimezoneOffset() * 60 * 1000);\n  return format(dtDateOnly, pattern);\n};\nexport const formatPrice = value => {\n  return new Intl.NumberFormat('pt-BR', {\n    minimumFractionDigits: 2,\n    style: 'currency',\n    currency: 'BRL'\n  }).format(value);\n};","map":{"version":3,"sources":["C:/workspace/ws-sts/metas-ulasoftware-puc/frontend/src/utils/format.ts"],"names":["format","round","value","precision","multiplier","Math","pow","formatLocalDate","date","pattern","dt","Date","dtDateOnly","valueOf","getTimezoneOffset","formatPrice","Intl","NumberFormat","minimumFractionDigits","style","currency"],"mappings":"AAAA,SAASA,MAAT,QAAuB,UAAvB;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAgBC,SAAhB,KAAsC;AACvD,MAAIC,UAAU,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAT,EAAcH,SAAS,IAAI,CAA3B,CAAjB;AACA,SAAOE,IAAI,CAACJ,KAAL,CAAWC,KAAK,GAAGE,UAAnB,CAAP;AACH,CAHM;AAKP,OAAO,MAAMG,eAAe,GAAG,CAACC,IAAD,EAAeC,OAAf,KAAmC;AAC9D,QAAMC,EAAE,GAAG,IAAIC,IAAJ,CAASH,IAAT,CAAX;AACA,QAAMI,UAAU,GAAG,IAAID,IAAJ,CAASD,EAAE,CAACG,OAAH,KAAeH,EAAE,CAACI,iBAAH,KAAyB,EAAzB,GAA8B,IAAtD,CAAnB;AACA,SAAOd,MAAM,CAACY,UAAD,EAAaH,OAAb,CAAb;AACH,CAJM;AAMP,OAAO,MAAMM,WAAW,GAAIb,KAAD,IAAmB;AAC1C,SAAO,IAAIc,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AAClCC,IAAAA,qBAAqB,EAAE,CADW;AAElCC,IAAAA,KAAK,EAAE,UAF2B;AAGlCC,IAAAA,QAAQ,EAAE;AAHwB,GAA/B,EAIJpB,MAJI,CAIGE,KAJH,CAAP;AAKH,CANM","sourcesContent":["import { format } from 'date-fns';\r\n\r\nexport const round = (value: number, precision: number) => {\r\n    var multiplier = Math.pow(100, precision || 0);\r\n    return Math.round(value * multiplier);\r\n}\r\n\r\nexport const formatLocalDate = (date: string, pattern: string) => {\r\n    const dt = new Date(date);\r\n    const dtDateOnly = new Date(dt.valueOf() + dt.getTimezoneOffset() * 60 * 1000);\r\n    return format(dtDateOnly, pattern);\r\n}\r\n\r\nexport const formatPrice = (value: number) => {\r\n    return new Intl.NumberFormat('pt-BR', {\r\n        minimumFractionDigits: 2,\r\n        style: 'currency',\r\n        currency: 'BRL'\r\n    }).format(value);\r\n};"]},"metadata":{},"sourceType":"module"}