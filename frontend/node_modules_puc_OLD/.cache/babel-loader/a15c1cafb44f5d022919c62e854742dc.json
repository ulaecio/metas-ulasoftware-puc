{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\ws-sts\\\\metas-ulasoftware-puc\\\\frontend\\\\src\\\\components\\\\BarChatRota\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport { getTokenData } from 'utils/auth';\nimport { BASE_URL, requestBackend } from '../../utils/request';\nimport * as ReactBootStrap from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BarChartRota = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [chartData, setChartData] = useState({\n    labels: {\n      categories: []\n    },\n    series: [{\n      name: \"\",\n      data: []\n    }]\n  });\n  useEffect(() => {\n    var _getTokenData;\n\n    requestBackend({\n      url: `${BASE_URL}/vendas/venda-tipo-bebida?rota=${(_getTokenData = getTokenData()) === null || _getTokenData === void 0 ? void 0 : _getTokenData.user_name}`,\n      withCredentials: true\n    }).then(response => {\n      setLoading(true);\n      const data = response.data;\n      const myLabels = data.map(x => x.tipo_bebida);\n      const mySeries = data.map(x => x.qtde_venda);\n      setChartData({\n        labels: {\n          categories: myLabels\n        },\n        series: [{\n          name: \"Venda\",\n          data: mySeries\n        }]\n      });\n    });\n  }, []);\n  const options = {\n    plotOptions: {\n      bar: {\n        horizontal: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ?\n    /*#__PURE__*/\n    // @ts-ignore\n    _jsxDEV(Chart, {\n      options: { ...options,\n        xaxis: chartData.labels\n      },\n      series: chartData.series,\n      type: \"bar\",\n      height: \"240\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"display-flex \",\n      children: /*#__PURE__*/_jsxDEV(ReactBootStrap.Spinner, {\n        className: \"spinner card\",\n        animation: \"border\",\n        variant: \"warning\",\n        role: \"status ml\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"visually-hidden\",\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(BarChartRota, \"PCiyIC4ZNF0wSEZ2UcPI7E7fsdg=\");\n\n_c = BarChartRota;\nexport default BarChartRota;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarChartRota\");","map":{"version":3,"sources":["C:/workspace/ws-sts/metas-ulasoftware-puc/frontend/src/components/BarChatRota/index.tsx"],"names":["useEffect","useState","Chart","getTokenData","BASE_URL","requestBackend","ReactBootStrap","BarChartRota","loading","setLoading","chartData","setChartData","labels","categories","series","name","data","url","user_name","withCredentials","then","response","myLabels","map","x","tipo_bebida","mySeries","qtde_venda","options","plotOptions","bar","horizontal","xaxis"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,qBAAzC;AACA,OAAO,KAAKC,cAAZ,MAAgC,iBAAhC;;;;AAaA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAY;AAClDW,IAAAA,MAAM,EAAE;AACJC,MAAAA,UAAU,EAAE;AADR,KAD0C;AAIlDC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE,EADV;AAEIC,MAAAA,IAAI,EAAE;AAFV,KADI;AAJ0C,GAAZ,CAA1C;AAYAhB,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACZK,IAAAA,cAAc,CAAC;AACXY,MAAAA,GAAG,EACE,GAAEb,QAAS,kCAAZ,iBAA6CD,YAAY,EAAzD,kDAA6C,cAAgBe,SAAU,EAFhE;AAGXC,MAAAA,eAAe,EAAE;AAHN,KAAD,CAAd,CAKKC,IALL,CAKWC,QAAD,IAAc;AAChBZ,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAMO,IAAI,GAAGK,QAAQ,CAACL,IAAtB;AACA,YAAMM,QAAQ,GAAGN,IAAI,CAACO,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,WAAhB,CAAjB;AACA,YAAMC,QAAQ,GAAGV,IAAI,CAACO,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACG,UAAhB,CAAjB;AACAhB,MAAAA,YAAY,CAAC;AACTC,QAAAA,MAAM,EAAE;AACJC,UAAAA,UAAU,EAAES;AADR,SADC;AAITR,QAAAA,MAAM,EAAE,CACJ;AACIC,UAAAA,IAAI,EAAE,OADV;AAEIC,UAAAA,IAAI,EAAEU;AAFV,SADI;AAJC,OAAD,CAAZ;AAWH,KAtBL;AAuBH,GAxBQ,EAwBN,EAxBM,CAAT;AAyBA,QAAME,OAAO,GAAG;AACZC,IAAAA,WAAW,EAAE;AACTC,MAAAA,GAAG,EAAE;AACDC,QAAAA,UAAU,EAAE;AADX;AADI;AADD,GAAhB;AAQA,sBAAQ;AAAA,cACPvB,OAAO;AAAA;AACJ;AACA,YAAC,KAAD;AACA,MAAA,OAAO,EAAE,EAAE,GAAGoB,OAAL;AAAcI,QAAAA,KAAK,EAAEtB,SAAS,CAACE;AAA/B,OADT;AAEA,MAAA,MAAM,EAAEF,SAAS,CAACI,MAFlB;AAGA,MAAA,IAAI,EAAC,KAHL;AAIA,MAAA,MAAM,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,YAFI,gBASJ;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,6BACA,QAAC,cAAD,CAAgB,OAAhB;AAAwB,QAAA,SAAS,EAAC,cAAlC;AAAiD,QAAA,SAAS,EAAC,QAA3D;AAAoE,QAAA,OAAO,EAAC,SAA5E;AAAsF,QAAA,IAAI,EAAC,WAA3F;AAAA,+BACI;AAAM,UAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAVI,mBAAR;AAmBH,CAlED;;GAAMP,Y;;KAAAA,Y;AAoEN,eAAeA,YAAf","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport Chart from 'react-apexcharts';\r\nimport { getTokenData } from 'utils/auth';\r\nimport { vendasTipoBebida } from '../../types/sales';\r\nimport { BASE_URL, requestBackend } from '../../utils/request';\r\nimport * as ReactBootStrap from 'react-bootstrap';\r\n\r\ntype Seriesdata = {\r\n    name: string;\r\n    data: number[];\r\n}\r\ntype Chartdata = {\r\n    labels: {\r\n        categories: String[];\r\n    };\r\n    series: Seriesdata[];\r\n}\r\n\r\nconst BarChartRota = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [chartData, setChartData] = useState<Chartdata>({\r\n        labels: {\r\n            categories: []\r\n        },\r\n        series: [\r\n            {\r\n                name: \"\",\r\n                data: []\r\n            }\r\n        ]\r\n    });\r\n\r\n    useEffect(() => {\r\n        requestBackend({\r\n            url:\r\n                `${BASE_URL}/vendas/venda-tipo-bebida?rota=${getTokenData()?.user_name}`,\r\n            withCredentials: true\r\n        })\r\n            .then((response) => {\r\n                setLoading(true);\r\n\r\n                const data = response.data as vendasTipoBebida[];\r\n                const myLabels = data.map(x => x.tipo_bebida)\r\n                const mySeries = data.map(x => x.qtde_venda);\r\n                setChartData({\r\n                    labels: {\r\n                        categories: myLabels\r\n                    },\r\n                    series: [\r\n                        {\r\n                            name: \"Venda\",\r\n                            data: mySeries\r\n                        }\r\n                    ]\r\n                });\r\n            });\r\n    }, []);\r\n    const options = {\r\n        plotOptions: {\r\n            bar: {\r\n                horizontal: true,\r\n            }\r\n        },\r\n    };\r\n\r\n    return (<>\r\n    {loading ? (\r\n        // @ts-ignore\r\n        <Chart\r\n        options={{ ...options, xaxis: chartData.labels }}\r\n        series={chartData.series}\r\n        type=\"bar\"\r\n        height=\"240\"\r\n    />\r\n    ) : (\r\n        <div className='display-flex '>\r\n        <ReactBootStrap.Spinner className='spinner card' animation='border' variant='warning' role='status ml'>\r\n            <span className='visually-hidden'>Loading...</span>\r\n        </ReactBootStrap.Spinner>\r\n    </div>\r\n    )}\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nexport default BarChartRota;"]},"metadata":{},"sourceType":"module"}