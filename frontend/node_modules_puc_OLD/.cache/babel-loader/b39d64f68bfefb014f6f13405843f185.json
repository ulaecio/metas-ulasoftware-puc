{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\ws-sts\\\\metas-ulasoftware-puc\\\\frontend\\\\src\\\\components\\\\PrivateRoute\\\\index.tsx\";\nimport React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { isAuthenticated, isAllowedByRole } from '../../utils/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n//VERIFICA SE USUÁRIO ESTÁ ATENTICADO CASO NÃO RETORNA PARA LOGIN.\nconst PrivateRoute = ({\n  children,\n  path,\n  allowedRoutes\n}) => {\n  return /*#__PURE__*/_jsxDEV(Route, {\n    path: path //@ts-ignore\n    ,\n    render: ({\n      location\n    }) => {\n      if (!isAuthenticated()) {\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: {\n            pathname: '/auth/login',\n            state: {\n              from: location\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 25\n        }, this);\n      } else if (isAuthenticated() && !isAllowedByRole(allowedRoutes)) {\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: {\n            pathname: '/rota'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }, this);\n      }\n\n      return children;\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["C:/workspace/ws-sts/metas-ulasoftware-puc/frontend/src/components/PrivateRoute/index.tsx"],"names":["React","Redirect","Route","isAuthenticated","isAllowedByRole","PrivateRoute","children","path","allowedRoutes","location","pathname","state","from"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,kBAAhC;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAuD,kBAAvD;;;AASA;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA;AAAlB,CAAD,KAA8C;AAC/D,sBACI,QAAC,KAAD;AACI,IAAA,IAAI,EAAED,IADV,CAEI;AAFJ;AAGI,IAAA,MAAM,EAAE,CAAC;AAAEE,MAAAA;AAAF,KAAD,KAAkB;AACtB,UAAI,CAACN,eAAe,EAApB,EAAwB;AACpB,4BACI,QAAC,QAAD;AAAU,UAAA,EAAE,EAAE;AACNO,YAAAA,QAAQ,EAAE,aADJ;AAENC,YAAAA,KAAK,EAAE;AAAEC,cAAAA,IAAI,EAAEH;AAAR;AAFD;AAAd;AAAA;AAAA;AAAA;AAAA,gBADJ;AAOH,OARD,MAQO,IAAIN,eAAe,MAAM,CAACC,eAAe,CAACI,aAAD,CAAzC,EAA0D;AAC7D,4BACI,QAAC,QAAD;AAAU,UAAA,EAAE,EAAE;AAAEE,YAAAA,QAAQ,EAAE;AAAZ;AAAd;AAAA;AAAA;AAAA;AAAA,gBADJ;AAIH;;AACD,aAAOJ,QAAP;AACH;AAnBL;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBH,CAxBD;;KAAMD,Y;AA0BN,eAAeA,YAAf","sourcesContent":["import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport { isAuthenticated, isAllowedByRole, Role } from '../../utils/auth';\r\n\r\ntype Props = {\r\n    children: React.ReactNode;\r\n    path: string;\r\n    allowedRoutes?: Role[];\r\n\r\n}\r\n\r\n//VERIFICA SE USUÁRIO ESTÁ ATENTICADO CASO NÃO RETORNA PARA LOGIN.\r\nconst PrivateRoute = ({ children, path, allowedRoutes }: Props) => {\r\n    return (\r\n        <Route\r\n            path={path}\r\n            //@ts-ignore\r\n            render={({ location }) => {\r\n                if (!isAuthenticated()) {\r\n                    return (\r\n                        <Redirect to={{\r\n                                pathname: '/auth/login',\r\n                                state: { from: location }\r\n                            }}\r\n                        />\r\n                    )\r\n                } else if (isAuthenticated() && !isAllowedByRole(allowedRoutes)) {\r\n                    return (\r\n                        <Redirect to={{ pathname: '/rota'}}\r\n                        />\r\n                    )\r\n                }\r\n                return children;\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PrivateRoute;"]},"metadata":{},"sourceType":"module"}