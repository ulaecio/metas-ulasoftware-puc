{"ast":null,"code":"import React from'react';import{Redirect,Route}from'react-router-dom';import{isAuthenticated,isAllowedByRole}from'../../utils/auth';import{jsx as _jsx}from\"react/jsx-runtime\";//VERIFICA SE USUÁRIO ESTÁ ATENTICADO CASO NÃO RETORNA PARA LOGIN.\nvar PrivateRoute=function PrivateRoute(_ref){var children=_ref.children,path=_ref.path,allowedRoutes=_ref.allowedRoutes;return/*#__PURE__*/_jsx(Route,{path:path//@ts-ignore\n,render:function render(_ref2){var location=_ref2.location;if(!isAuthenticated()){return/*#__PURE__*/_jsx(Redirect,{to:{pathname:'/auth/login',state:{from:location}}});}else if(isAuthenticated()&&!isAllowedByRole(allowedRoutes)){return/*#__PURE__*/_jsx(Redirect,{to:{pathname:'/rota'}});}return children;}});};export default PrivateRoute;","map":{"version":3,"sources":["C:/workspace/ws-sts/ulasoftware-metas/frontend/src/components/PrivateRoute/index.tsx"],"names":["React","Redirect","Route","isAuthenticated","isAllowedByRole","PrivateRoute","children","path","allowedRoutes","location","pathname","state","from"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,QAAT,CAAmBC,KAAnB,KAAgC,kBAAhC,CACA,OAASC,eAAT,CAA0BC,eAA1B,KAAuD,kBAAvD,C,2CASA;AACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAA8C,IAA3CC,CAAAA,QAA2C,MAA3CA,QAA2C,CAAjCC,IAAiC,MAAjCA,IAAiC,CAA3BC,aAA2B,MAA3BA,aAA2B,CAC/D,mBACI,KAAC,KAAD,EACI,IAAI,CAAED,IACN;AAFJ,CAGI,MAAM,CAAE,sBAAkB,IAAfE,CAAAA,QAAe,OAAfA,QAAe,CACtB,GAAI,CAACN,eAAe,EAApB,CAAwB,CACpB,mBACI,KAAC,QAAD,EAAU,EAAE,CAAE,CACNO,QAAQ,CAAE,aADJ,CAENC,KAAK,CAAE,CAAEC,IAAI,CAAEH,QAAR,CAFD,CAAd,EADJ,CAOH,CARD,IAQO,IAAIN,eAAe,IAAM,CAACC,eAAe,CAACI,aAAD,CAAzC,CAA0D,CAC7D,mBACI,KAAC,QAAD,EAAU,EAAE,CAAE,CAAEE,QAAQ,CAAE,OAAZ,CAAd,EADJ,CAIH,CACD,MAAOJ,CAAAA,QAAP,CACH,CAnBL,EADJ,CAuBH,CAxBD,CA0BA,cAAeD,CAAAA,YAAf","sourcesContent":["import React from 'react';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport { isAuthenticated, isAllowedByRole, Role } from '../../utils/auth';\r\n\r\ntype Props = {\r\n    children: React.ReactNode;\r\n    path: string;\r\n    allowedRoutes?: Role[];\r\n\r\n}\r\n\r\n//VERIFICA SE USUÁRIO ESTÁ ATENTICADO CASO NÃO RETORNA PARA LOGIN.\r\nconst PrivateRoute = ({ children, path, allowedRoutes }: Props) => {\r\n    return (\r\n        <Route\r\n            path={path}\r\n            //@ts-ignore\r\n            render={({ location }) => {\r\n                if (!isAuthenticated()) {\r\n                    return (\r\n                        <Redirect to={{\r\n                                pathname: '/auth/login',\r\n                                state: { from: location }\r\n                            }}\r\n                        />\r\n                    )\r\n                } else if (isAuthenticated() && !isAllowedByRole(allowedRoutes)) {\r\n                    return (\r\n                        <Redirect to={{ pathname: '/rota'}}\r\n                        />\r\n                    )\r\n                }\r\n                return children;\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PrivateRoute;"]},"metadata":{},"sourceType":"module"}